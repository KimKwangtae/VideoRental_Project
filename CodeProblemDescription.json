{
  /*
    Code Refactoring 개선점 5가지

    1.불필요한 usining 제거 및 변수 및 메소드 가독성을 위한 Getter Setter 추가 및 표기법 변경
    -> 불필요한 using 선언을 자제하고 using을 namespace 내부에 선언하여 가독성을 높여야한다. 또한 변수도 파스칼 표기 또는 카멜표기법으로 변경하고 메소드가 아무리 짧더라도
       가독성을 위해 { or }위치마다 뛰어쓰기 하도록 해야한다. 또한 변수가 변경이 가능하도록 Getter Setter를 메소드를 추가해야한다.


  2. 장르타입을 Const 상수로 사용 문제점
   -> Movie 클래스안에 Const 상수를 사용함으로써 만약 추후에 Movie에 장르 타입 뿐만 아니라 예를 들어 시청연령(전체,15세,19세) 등 새로운 타입이 생겼을때 
      각각의 타입의 소속을 찾을수 없다. 몇번부터 몇번까지가 장르타입인지 시청연령 타입인지 구분을 짓기 어려울수 있다.
      이를 해결 하기 위해 Enum 열거형을 사용해 장르타입안에는 어떤 종류가 있는지 알수 있으며, 출력 형식도 상수를 다시 String으로 변환 할 필요가 없고
      개발자 입장에서도 코드의 가독성을 높일수 있다.


  3. Movie Rental Price 문제점
   ->현재 영화의 가격을 결정 짓는 메소드는 Customer 클래스의 statatement 메소드이다. 영화 렌탈 가격이 Customer에 있을 경우 두 클래스 간에 관계를 끊을수 없다.
     만약 영화 렌탈 가격이 인상이 되거나 영화 장르마다 할인을 주기 위해선 Customer 클래스의 수정이 불가피하다. 이는 Customer가 가격을 결정하는 사람이 아니며,
     단일책임원칙에도 위배된다. 렌탈 가격을 결정 짓는 요인은 영화 장르에 따른 대여기간이다. 이를 바탕으로 영화 장르를 기반으로 전략패턴을 사용하여 영화 렌탈 가격을 장르 타입에 따라
     결정될 수 있도록 수정해야한다. Rental 클래스를 활용하여 렌탈 가격을 캡슐화도 하여야한다.

  4. RentalShop Class가 없는 문제점.
   -> Main함수가 현재 RentalShop 역할을 하고 있지만 RentalShop 클래스를 추가하여 객체의 생성을 캡슐화를 통해 관리하도록 해야한다. 그래야 추후 RentalShop에 추가 기능을 추가하더라도
      Main 함수를 수정하는 일을 최소화 하도록 해야한다.
    
  5.Try Catch를 통한 예기치 못한 Exception Handling
   -> 메소드안에 로직이 간단하더라도 추후 어떻게 수정될지 모르기 때문에 그 에 따른 Try Catch문을 사용하여 Exception을 Throw 할것인지 해당 메소드가 처리 할 것인지 결정 할수 있도록 해야한다.


*/
}
